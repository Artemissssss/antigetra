import TeleBot from "telebot"
// const openai = require('openai');
// const { MongoClient } = require('mongodb');
import { Configuration,OpenAIApi } from 'openai';
import { MongoClient } from 'mongodb';
const openaiClient = new OpenAIApi(process.env.OPENAI_API_KEY);
const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
  });
  const openai = new OpenAIApi(configuration);

const bot = new TeleBot(process.env.TELEGRAM_BOT_TOKEN)
function cyrillicToLatin(text) {
    let cyrillic = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è';
    let latin = 'abvgdeejzijklmnoprstufhzcss_y_eua';
    let result = '';
    for (let i = 0; i < text.length; i++) {
        let index = cyrillic.indexOf(text[i].toLowerCase());
        if (index >= 0) {
            result += text[i] === text[i].toUpperCase() ? latin[index].toUpperCase() : latin[index];
        } else {
            result += text[i];
        }
    }
    return result;
}
function latinToCyrillic(input) {
    const latinToCyrillicMap = {
      a: '–∞',
      b: '–±',
      c: '—Ü',
      d: '–¥',
      e: '–µ',
      f: '—Ñ',
      g: '–≥',
      h: '—Ö',
      i: '—ñ',
      j: '–π',
      k: '–∫',
      l: '–ª',
      m: '–º',
      n: '–Ω',
      o: '–æ',
      p: '–ø',
      q: '–∫',
      r: '—Ä',
      s: '—Å',
      t: '—Ç',
      u: '—É',
      v: '–≤',
      w: '–≤',
      x: '–∫—Å',
      y: '–∏',
      z: '–∑',
    };
  
    return input
      .split('')
      .map((char) => {
        const lowercaseChar = char.toLowerCase();
        return latinToCyrillicMap[lowercaseChar] || char;
      })
      .join('');
  }
async function moderateText(text) {
    try {
        // –ó—Ä–æ–±—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–æ OpenAI API
        const response = await openaiClient.moderation.classify({
            prompt: text
        });
        return response;
    } catch (error) {
        console.error(error);
        throw error; // –ü–µ—Ä–µ—Å–ª–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É, —â–æ–± –æ–±—Ä–æ–±–∏—Ç–∏ —ó—ó –≤–∏—â–µ
    }
}
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

bot.on("text", async msg => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const text = cyrillicToLatin((msg.text).toLowerCase())
    .replace(/@/i, 'a').replace(/√†/i, 'a').replace(/√°/i, 'a').replace(/√¢/i, 'a').replace(/√£/i, 'a').replace(/√§/i, 'a').replace(/√•/i, 'a').replace(/√¶/i, 'a')
    .replace(/√ß/i, 'c').replace(/√®/i, 'e').replace(/√©/i, 'e').replace(/√™/i, 'e').replace(/√´/i, 'e').replace(/√¨/i, 'i').replace(/√≠/i, 'i').replace(/√Æ/i, 'i')
    .replace(/√∞/i, 'o').replace(/–ª/i, 'l').replace(/√∂/i, 'o').replace(/√¥/i, 'o').replace(/√≤/i, 'o').replace(/√≥/i, 'o').replace(/≈Ç/i, 'l').replace(/√±/i, 'n')
    .replace(/≈Ñ/i, 'n').replace(/0/i, 'o').replace(/√©/i, 'e').replace(/√™/i, 'e').replace(/√´/i, 'e').replace(/√¨/i, 'i').replace(/√≠/i, 'i').replace(/√Æ/i, 'i')
    .replace(/./i, '').replace(/_/i, '').replace(/-/i, '').replace("(", '').replace(")", '').split(" ").join("").replace(/≈ã/i, 'n').replace(/≈â/i, 'n').replace(/≈Ü/i, 'n')
    .replace(/ƒ°/i, 'g').replace(/ƒù/i, 'g').replace(/ƒü/i, 'g').replace(/ƒ£/i, 'g').replace(/ƒ•/i, 'e')
    const text1 = latinToCyrillic((msg.text).toLowerCase().replace(/@/i, 'a').replace(/√†/i, 'a').replace(/√°/i, 'a').replace(/√¢/i, 'a').replace(/√£/i, 'a').replace(/√§/i, 'a').replace(/√•/i, 'a').replace(/√¶/i, 'a')
    .replace(/√ß/i, 'c').replace(/√®/i, 'e').replace(/√©/i, 'e').replace(/√™/i, 'e').replace(/√´/i, 'e').replace(/√¨/i, 'i').replace(/√≠/i, 'i').replace(/√Æ/i, 'i')
    .replace(/√∞/i, 'o').replace(/–ª/i, 'l').replace(/√∂/i, 'o').replace(/√¥/i, 'o').replace(/√≤/i, 'o').replace(/√≥/i, 'o').replace(/≈Ç/i, 'l').replace(/√±/i, 'n')
    .replace(/≈Ñ/i, 'n').replace(/0/i, 'o').replace(/√©/i, 'e').replace(/√™/i, 'e').replace(/√´/i, 'e').replace(/√¨/i, 'i').replace(/√≠/i, 'i').replace(/√Æ/i, 'i')
    .replace(/./i, '').replace(/_/i, '').replace(/-/i, '').replace("(", '').replace(")", '').split(" ").join("").replace(/≈ã/i, 'n').replace(/≈â/i, 'n').replace(/≈Ü/i, 'n').replace(/ƒ°/i, 'g').replace(/ƒù/i, 'g').replace(/ƒü/i, 'g').replace(/ƒ£/i, 'g').replace(/ƒ•/i, 'e'))
    .replace(/“ë/i, '–≥').replace(/./i, '').replace(/_/i, '').replace(/-/i, '').replace("(", '').replace(")", '').split(" ").join("");
    let banStatus = false;
    const banWords = ["#stop_lgbt","–≥–µ—Ç","—è –Ω–µ —Ç–∞–∫–∏–π","–∞–ª—å—Ö","—è –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π","—è –Ω–µ –≥–µ–π","—è –Ω–µ “ë–µ–π","get","het","–≥–µ—Ç","heter√∂","–≥–µ—Ç–µ—Ä–æ","“êe—Ç","–ì—ê—Ç—ê—Ä–æÃÄ","–ì—ê—Ç–µ—Ä–æÃÄ","–°–ª–∞–≤–∞ –≥—ê—Ç—ê—Ä–æÃÄ","–í—ñ—á–Ω–∞ —Å–ª–∞–≤–∞ –≥—ê—Ç—ê—Ä–æÃÄ","–ì—ê—Ç—ê—Ä–æÃÄ","–ì—ê—Ç—ê—Ä–æÃÄ","–ì—ê—Ç—ê—Ä–æÃÄ","–ì—ê—Ç—ê—Ä–æÃÄ","hƒôt","–Ø “ëet–µ—Äo","–ê–ª–µ –Ω–µ –ª–≥–±—Ç","“ë–µ—Ç–µ—Ä–æ","/start –ø—Ä–∏–≤—ñ—Ç","st lg","Fhdb","g√©t","gƒôt","gƒót","ge≈ß","/add","/block 1052973544 1024","/block 1052973544 -1","–°—Ç–æ–ø –õ–ì–ë–¢","–ê—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞–∑–∞–∑–∞–∑–∞–∑–∞—Ö–∞—Ö–∞—Ö","–ê—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞–∑–∞–∑–∞–∑–∞–∑–∞—Ö–∞—Ö–∞—Ö—Ö","–∫–ª–µ–≤–µ—Ç–∞","/block 1052973544 5000","/gpt4 –Ø–∫ –∑—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—É –ª–≥–±—Ç","#–∑—É–ø—ñ—Ç—å_–ø—Ä–æ–ø–∞–≥–∞–Ω–¥—É_–ª–≥–±—Ç","#–ù–Ü_–ª—ñ–≤—ñ–π_–ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ñ","#say_no_js_say_yes_python","#27–ª—ñ—Ü–µ–π","#45–ª—ñ—Ü–µ–π","#stop_l_g_b_t","#–Ω—ñ_–ª—ñ–≤—ñ–π_–ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ñ","#no_üè≥Ô∏è‚Äçüåà","#!–ª–≥–±—Ç","–Ø!–ª–≥–±—Ç","—è!–ª–≥–±—Ç","Hƒô—Ç–µ—Ä–æ—Å–µ–∫—Å—É–∞–ª—å–Ω—ñ—Å—Ç—å - —Ü–µ –æ—Å–Ω–æ–≤–Ω–∏–π –≥–µ–Ω","–∑—É–ø–∏–Ω—ñ—Ç—å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—É “ë–µ—ó–≤","–Ø –Ω–µ –≥–µ–π, —ñ –Ω—ñ–∫–æ–ª–∏ –Ω–∏–º –Ω–µ –±—É–¥—É","–ì–µ—Ç–µ—Ä–æ","–ì–µ—Ç–µ—Ä–æ","“ê–µ—Ç–µ—Ä–æ","noüè≥Ô∏è‚Äçüåà","nooüè≥Ô∏è‚Äçüåà","n√≥üè≥Ô∏è‚Äçüåà","noooüè≥Ô∏è‚Äçüåà","#–¥–µ–ø–æ—Ä–æ—à–µ–Ω—ñ–∑–∞—Ü—ñ—è","üè≥Ô∏è‚Äçüåàno","ƒ£ƒì≈ßer–æ"];
    const username = msg.from.username;
    if(username!=="Artemis_Vainshtein" && msg.from.id !=="1647838471" && msg.from.id !=="833961178" && msg.from.id !=="1128434712" &&msg.from.id !=="888466576" && msg.from.id !=="752317094" && msg.from.id !=="628452250"){
        for(let i = 0; i<banWords.length;i++){
            if((text.includes(banWords[i]) || text1.includes(banWords[i]) || msg.text.includes(banWords[i])) && !text.includes("–≥–µ—Ç—å–º–∞–Ω") && !text1.includes("–≥–µ—Ç—å–º–∞–Ω")){
                banStatus = true;
                break;
            }else if(text.includes("st") && text.includes("lg")){
                banStatus = true;
                break;
            }else if(text1.includes("—Å—Ç") && (text1.includes("–ª–≥") || text.includes("–ª“ë"))){
                banStatus = true;
                break;
            }else if(text1.includes("–Ω—ñ") && text1.includes("–ª–≥")){
                banStatus = true;
                break;
            }else if(text.includes("no") && text.includes("lg")){
                banStatus = true;
                break;
            }else if(text.includes("no") && (text.includes("üè≥Ô∏è‚Äçüåà") || text.includes("üè≥Ô∏è‚Äç‚ößÔ∏è"))){
                banStatus = true;
                break;
            }else if(text.includes("st") && (text.includes("üè≥Ô∏è‚Äçüåà") || text.includes("üè≥Ô∏è‚Äç‚ößÔ∏è"))){
                banStatus = true;
                break;
            }else if(text1.includes("—Å—Ç") && (text1.includes("üè≥Ô∏è‚Äçüåà") || text1.includes("üè≥Ô∏è‚Äç‚ößÔ∏è"))){
                banStatus = true;
                break;
            }else if(text1.includes("–Ω—ñ") && (text1.includes("üè≥Ô∏è‚Äçüåà") || text1.includes("üè≥Ô∏è‚Äç‚ößÔ∏è"))){
                banStatus = true;
                break;
            }else if(text1.includes("—Å–ª–∞–≤") && text1.includes("–≥–µ—Ç")){
                banStatus = true;
                break;
            }else if(text.includes("glor") && (text.includes("het") || text.includes("get"))){
                banStatus = true;
                break;
            }
        };
        if((`${msg.from.id}` === "5558411571" || `${msg.from.id}` === "5551509960" || `${msg.from.id}` === "1864697655") && !banStatus){
            if(text.includes("natural")){
                banStatus = true;
            }
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.NEXT_PUBLIC_DATABASE_USER}:${process.env.NEXT_PUBLIC_DATABASE_PASSWORD}@${process.env.NEXT_PUBLIC_DATABASE}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
            );
            const coll = client.db('banwords').collection('lgbtqplus');
            const cursor = coll.find();
            const result = await cursor.toArray();
            await client.close();
            for(let i = 0; i<result.length;i++){
                if(text.includes(result[i].text.toLowerCase()) || text1.includes(result[i].text.toLowerCase()) || msg.text.includes(result[i].text.toLowerCase())){
                    banStatus = true;
                };
            };
            if(!banStatus){///moderations

                // const apiUrl =  "https://this-is-api.run-eu-central1.goorm.site/moderations";
                    
                // // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
                // const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
                
                // try {
                //     const response = await fetch(apiUrl, {
                //         method: 'POST',
                //         headers: {
                //             'Content-Type': 'application/json'
                //         },
                //         timeout: timeoutMs,
                //         body: JSON.stringify({prompt:msg.text}),
                //     });
            
                //     if (response.ok) {
                //         if(response.results[0].categories.hate || response.results[0].categories.hate/threatening || response.results[0].categories.harassment || response.results[0].categories.violence || response.results[0].categories.violence/graphic){
                //             banStatus = true;
                //         }
                //     } else {
                //         console.error("Request failed with status:", response.status);
                //          await msg.reply.text("An error occurred while processing your request.");
                //     }
                // } catch (error) {
                //     console.error("Error occurred:", error.message);
                //      await msg.reply.text("An error occurred while processing your request.");
                // }

                if(!banStatus){
                    const promptText = `Text: '${msg.text}'
                `;

                        const data =  { prompt: promptText,temperature:0.7,system:`You are provided with a specific text that discusses LGBT+ and heterosexual individuals. Your task is to analyze the text and determine the sentiment expressed towards LGBT+ and heterosexual individuals. Based on the text's portrayal, provide a concise response according to the following criteria:
    If there is no mention of LGBT+ individuals but a negative portrayal of heterosexual individuals is present, return **null true**.
If there is no mention of LGBT+ individuals and a positive or neutral portrayal of heterosexual individuals is present, return **null false**.
If there is a positive or neutral portrayal of LGBT+ individuals but no mention of heterosexual individuals, return **false null**.
If there is a negative portrayal of LGBT+ individuals but no mention of heterosexual individuals, return **true null**.
If there is no mention of both LGBT+ and heterosexual individuals, return **null null**.
If the text contains a positive or neutral portrayal of LGBT+ individuals and a negative portrayal of heterosexual individuals, return **false true**.
If the text contains a negative portrayal of LGBT+ individuals and a positive or neutral portrayal of heterosexual individuals, return **true false**.
If the text contains a positive or neutral portrayal of both LGBT+ and heterosexual individuals, return **false false**.
If the text contains a negative portrayal of both LGBT+ and heterosexual individuals, return **true true**.
Example 1: heterosexuals are bad. Answer **null true**.
Example 2: heterosexuals are cool. Answer **null false**.
Example 3: gays cool. Answer **false null**.
Example 4: gays bad. Answer **true null**.
Example 5: hello. Answer **null null**.
Example 6: gays cool and heterosexuals are bad. Answer **false true**.
Example 7: gays bad and heterosexuals are cool. Answer **true false**.
Example 8: gays cool and heterosexuals are cool. Answer **false false**.
Example 9: gays bad and heterosexuals are bad. Answer **true true**.
Provide a concise response solely based on the given text and the provided criteria. Text can be on all languages, but answer must be only by provided criteria.` };
                    
                    // –ó–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π URL API
                    const apiUrl =  "https://this-is-api.run-eu-central1.goorm.site/gpt";
                    
                    // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
                    const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
                    
                    try {
                        const response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            timeout: timeoutMs,
                            body: JSON.stringify(data),
                        });
                
                        if (response.ok) {
                            const responseData = await response.json();
                            const resultText = responseData.text;
                            if(resultText.includes("null")){
                                if(resultText.includes("true")){
                                    if(resultText.indexOf("true")<resultText.indexOf("null")){
                                        banStatus=true;
                                    }else{
                                        banStatus=false;
                                    }
                                }else if(resultText.includes("false")){
                                    if(resultText.indexOf("false")>resultText.indexOf("null")){
                                        banStatus=true;
                                        msg.reply.text("–ë–µ–∑ –≥–µ—Ç–µ—Ä–æ—Ñ—ñ–ª—ñ—ó")
                                    }else{
                                        banStatus=false;
                                    }
                                }else{
                                    banStatus=false;
                                }
                            }else{
                                if(resultText.includes("true true")){
                                    banStatus=true;
                                }else if(resultText.includes("true false")){
                                    banStatus=true;         
                                }else if(resultText.includes("false false")){
                                    banStatus=true;
                                    msg.reply.text("–ë–µ–∑ –≥–µ—Ç–µ—Ä–æ—Ñ—ñ–ª—ñ—ó")        
                                }else if(resultText.includes("false true")){
                                    banStatus=false;     
                                }
                            }
                        } else {
                            console.error("Request failed with status:", response.status);
                             await msg.reply.text("An error occurred while processing your request.");
                        }
                    } catch (error) {
                        console.error("Error occurred:", error.message);
                         await msg.reply.text("An error occurred while processing your request.");
                    }}
            }
        }
    }
    return banStatus ? bot.deleteMessage(chatId, messageId) : null;
});


//"true false".slice("true false".indexOf("true"),"true false".indexOf("false")+5)

bot.on(['/add'], async (msg,props) => {
    const username = msg.from.username;
    const replyToDelete = msg.reply_to_message;
    const text = replyToDelete.text 
    if(username==="Artemis_Vainshtein"){
        if(parseInt(props)){
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.NEXT_PUBLIC_DATABASE_USER}:${process.env.NEXT_PUBLIC_DATABASE_PASSWORD}@${process.env.NEXT_PUBLIC_DATABASE}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
            );
            const coll = client.db('banwords').collection('lgbtqplus');
            const result = await coll.insertOne({text:text.slice(0,parseInt(props))})
            await client.close();
            bot.deleteMessage(msg.chat.id, replyToDelete.message_id);
            return msg.reply.text("–î–æ–¥–∞–Ω–æ")
        }else{
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.NEXT_PUBLIC_DATABASE_USER}:${process.env.NEXT_PUBLIC_DATABASE_PASSWORD}@${process.env.NEXT_PUBLIC_DATABASE}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
            );
            const coll = client.db('banwords').collection('lgbtqplus');
            const result = await coll.insertOne({text:text})
            await client.close();
            bot.deleteMessage(msg.chat.id, replyToDelete.message_id);
            return msg.reply.text("–î–æ–¥–∞–Ω–æ")
        }
    }else{
        return msg.reply.text("–ë–µ–∑–ø—Ä–∞–≤–Ω–∏–π")
    }
});

bot.on(/^\/ok (.+)$/, async (msg,props) => {
    const promptText = `Text: '${props.match[1]}'
`;
    const data =  { prompt: promptText,temperature:0.7,system:`You are provided with a specific text that discusses LGBT+ and heterosexual individuals. Your task is to analyze the text and determine the sentiment expressed towards LGBT+ and heterosexual individuals. Based on the text's portrayal, provide a concise response according to the following criteria:
    If there is no mention of LGBT+ individuals but a negative portrayal of heterosexual individuals is present, return **null true**.
If there is no mention of LGBT+ individuals and a positive or neutral portrayal of heterosexual individuals is present, return **null false**.
If there is a positive or neutral portrayal of LGBT+ individuals but no mention of heterosexual individuals, return **false null**.
If there is a negative portrayal of LGBT+ individuals but no mention of heterosexual individuals, return **true null**.
If there is no mention of both LGBT+ and heterosexual individuals, return **null null**.
If the text contains a positive or neutral portrayal of LGBT+ individuals and a negative portrayal of heterosexual individuals, return **false true**.
If the text contains a negative portrayal of LGBT+ individuals and a positive or neutral portrayal of heterosexual individuals, return **true false**.
If the text contains a positive or neutral portrayal of both LGBT+ and heterosexual individuals, return **false false**.
If the text contains a negative portrayal of both LGBT+ and heterosexual individuals, return **true true**.
Example 1: heterosexuals are bad. Answer **null true**.
Example 2: heterosexuals are cool. Answer **null false**.
Example 3: gays cool. Answer **false null**.
Example 4: gays bad. Answer **true null**.
Example 5: hello. Answer **null null**.
Example 6: gays cool and heterosexuals are bad. Answer **false true**.
Example 7: gays bad and heterosexuals are cool. Answer **true false**.
Example 8: gays cool and heterosexuals are cool. Answer **false false**.
Example 9: gays bad and heterosexuals are bad. Answer **true true**.
Provide a concise response solely based on the given text and the provided criteria. Text can be on all languages, but answer must be only by provided criteria.` };
    
    // –ó–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π URL API
    const apiUrl =  "https://this-is-api.run-eu-central1.goorm.site/gpt";
    
    // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
    
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: timeoutMs,
            body: JSON.stringify(data),
        });

        
        if (response.ok) {
            const responseData = await response.json();
            const resultText = responseData.text;
            return await msg.reply.text(resultText);
        } else {
            console.error("Request failed with status:", response.status);
            return await msg.reply.text("An error occurred while processing your request.");
        }
    } catch (error) {
        console.error("Error occurred:", error.message);
        return await msg.reply.text("An error occurred while processing your request.");
    }
});


bot.on("edit", async msg => {
    const chatId = msg.chat.id;
    const messageId = msg.message_id;
    const text = cyrillicToLatin((msg.text).toLowerCase())
    .replace(/@/i, 'a').replace(/√†/i, 'a').replace(/√°/i, 'a').replace(/√¢/i, 'a').replace(/√£/i, 'a').replace(/√§/i, 'a').replace(/√•/i, 'a').replace(/√¶/i, 'a')
    .replace(/√ß/i, 'c').replace(/√®/i, 'e').replace(/√©/i, 'e').replace(/√™/i, 'e').replace(/√´/i, 'e').replace(/√¨/i, 'i').replace(/√≠/i, 'i').replace(/√Æ/i, 'i')
    .replace(/√∞/i, 'o').replace(/–ª/i, 'l').replace(/√∂/i, 'o').replace(/√¥/i, 'o').replace(/√≤/i, 'o').replace(/√≥/i, 'o').replace(/≈Ç/i, 'l').replace(/√±/i, 'n')
    .replace(/≈Ñ/i, 'n').replace(/0/i, 'o').replace(/√©/i, 'e').replace(/√™/i, 'e').replace(/√´/i, 'e').replace(/√¨/i, 'i').replace(/√≠/i, 'i').replace(/√Æ/i, 'i')
    .replace(/./i, '').replace(/_/i, '').replace(/-/i, '').replace("(", '').replace(")", '').split(" ").join("").replace(/≈ã/i, 'n').replace(/≈â/i, 'n').replace(/≈Ü/i, 'n')
    .replace(/ƒ°/i, 'g').replace(/ƒù/i, 'g').replace(/ƒü/i, 'g').replace(/ƒ£/i, 'g').replace(/ƒ•/i, 'e')
    const text1 = latinToCyrillic((msg.text).toLowerCase().replace(/@/i, 'a').replace(/√†/i, 'a').replace(/√°/i, 'a').replace(/√¢/i, 'a').replace(/√£/i, 'a').replace(/√§/i, 'a').replace(/√•/i, 'a').replace(/√¶/i, 'a')
    .replace(/√ß/i, 'c').replace(/√®/i, 'e').replace(/√©/i, 'e').replace(/√™/i, 'e').replace(/√´/i, 'e').replace(/√¨/i, 'i').replace(/√≠/i, 'i').replace(/√Æ/i, 'i')
    .replace(/√∞/i, 'o').replace(/–ª/i, 'l').replace(/√∂/i, 'o').replace(/√¥/i, 'o').replace(/√≤/i, 'o').replace(/√≥/i, 'o').replace(/≈Ç/i, 'l').replace(/√±/i, 'n')
    .replace(/≈Ñ/i, 'n').replace(/0/i, 'o').replace(/√©/i, 'e').replace(/√™/i, 'e').replace(/√´/i, 'e').replace(/√¨/i, 'i').replace(/√≠/i, 'i').replace(/√Æ/i, 'i')
    .replace(/./i, '').replace(/_/i, '').replace(/-/i, '').replace("(", '').replace(")", '').split(" ").join("").replace(/≈ã/i, 'n').replace(/≈â/i, 'n').replace(/≈Ü/i, 'n').replace(/ƒ°/i, 'g').replace(/ƒù/i, 'g').replace(/ƒü/i, 'g').replace(/ƒ£/i, 'g').replace(/ƒ•/i, 'e'))
    .replace(/“ë/i, '–≥').replace(/./i, '').replace(/_/i, '').replace(/-/i, '').replace("(", '').replace(")", '').split(" ").join("");
    let banStatus = false;
    const banWords = ["#stop_lgbt","–≥–µ—Ç","—è –Ω–µ —Ç–∞–∫–∏–π","–∞–ª—å—Ö","—è –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π","—è –Ω–µ –≥–µ–π","—è –Ω–µ “ë–µ–π","get","het","–≥–µ—Ç","heter√∂","–≥–µ—Ç–µ—Ä–æ","“êe—Ç","–ì—ê—Ç—ê—Ä–æÃÄ","–ì—ê—Ç–µ—Ä–æÃÄ","–°–ª–∞–≤–∞ –≥—ê—Ç—ê—Ä–æÃÄ","–í—ñ—á–Ω–∞ —Å–ª–∞–≤–∞ –≥—ê—Ç—ê—Ä–æÃÄ","–ì—ê—Ç—ê—Ä–æÃÄ","–ì—ê—Ç—ê—Ä–æÃÄ","–ì—ê—Ç—ê—Ä–æÃÄ","–ì—ê—Ç—ê—Ä–æÃÄ","hƒôt","–Ø “ëet–µ—Äo","–ê–ª–µ –Ω–µ –ª–≥–±—Ç","“ë–µ—Ç–µ—Ä–æ","/start –ø—Ä–∏–≤—ñ—Ç","st lg","Fhdb","g√©t","gƒôt","gƒót","ge≈ß","/add","/block 1052973544 1024","/block 1052973544 -1","–°—Ç–æ–ø –õ–ì–ë–¢","–ê—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞–∑–∞–∑–∞–∑–∞–∑–∞—Ö–∞—Ö–∞—Ö","–ê—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞–∑–∞–∑–∞–∑–∞–∑–∞—Ö–∞—Ö–∞—Ö—Ö","–∫–ª–µ–≤–µ—Ç–∞","/block 1052973544 5000","/gpt4 –Ø–∫ –∑—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—É –ª–≥–±—Ç","#–∑—É–ø—ñ—Ç—å_–ø—Ä–æ–ø–∞–≥–∞–Ω–¥—É_–ª–≥–±—Ç","#–ù–Ü_–ª—ñ–≤—ñ–π_–ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ñ","#say_no_js_say_yes_python","#27–ª—ñ—Ü–µ–π","#45–ª—ñ—Ü–µ–π","#stop_l_g_b_t","#–Ω—ñ_–ª—ñ–≤—ñ–π_–ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ñ","#no_üè≥Ô∏è‚Äçüåà","#!–ª–≥–±—Ç","–Ø!–ª–≥–±—Ç","—è!–ª–≥–±—Ç","Hƒô—Ç–µ—Ä–æ—Å–µ–∫—Å—É–∞–ª—å–Ω—ñ—Å—Ç—å - —Ü–µ –æ—Å–Ω–æ–≤–Ω–∏–π –≥–µ–Ω","–∑—É–ø–∏–Ω—ñ—Ç—å –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—É “ë–µ—ó–≤","–Ø –Ω–µ –≥–µ–π, —ñ –Ω—ñ–∫–æ–ª–∏ –Ω–∏–º –Ω–µ –±—É–¥—É","–ì–µ—Ç–µ—Ä–æ","–ì–µ—Ç–µ—Ä–æ","“ê–µ—Ç–µ—Ä–æ","noüè≥Ô∏è‚Äçüåà","nooüè≥Ô∏è‚Äçüåà","n√≥üè≥Ô∏è‚Äçüåà","noooüè≥Ô∏è‚Äçüåà","#–¥–µ–ø–æ—Ä–æ—à–µ–Ω—ñ–∑–∞—Ü—ñ—è","üè≥Ô∏è‚Äçüåàno","ƒ£ƒì≈ßer–æ"];
    const username = msg.from.username;
    if(username!=="Artemis_Vainshtein" && msg.from.id !=="1647838471" && msg.from.id !=="833961178" && msg.from.id !=="1128434712" &&msg.from.id !=="888466576" && msg.from.id !=="752317094" && msg.from.id !=="628452250"){
        for(let i = 0; i<banWords.length;i++){
            if((text.includes(banWords[i]) || text1.includes(banWords[i]) || msg.text.includes(banWords[i])) && !text.includes("–≥–µ—Ç—å–º–∞–Ω") && !text1.includes("–≥–µ—Ç—å–º–∞–Ω")){
                banStatus = true;
                break;
            }else if(text.includes("st") && text.includes("lg")){
                banStatus = true;
                break;
            }else if(text1.includes("—Å—Ç") && (text1.includes("–ª–≥") || text.includes("–ª“ë"))){
                banStatus = true;
                break;
            }else if(text1.includes("–Ω—ñ") && text1.includes("–ª–≥")){
                banStatus = true;
                break;
            }else if(text.includes("no") && text.includes("lg")){
                banStatus = true;
                break;
            }else if(text.includes("no") && (text.includes("üè≥Ô∏è‚Äçüåà") || text.includes("üè≥Ô∏è‚Äç‚ößÔ∏è"))){
                banStatus = true;
                break;
            }else if(text.includes("st") && (text.includes("üè≥Ô∏è‚Äçüåà") || text.includes("üè≥Ô∏è‚Äç‚ößÔ∏è"))){
                banStatus = true;
                break;
            }else if(text1.includes("—Å—Ç") && (text1.includes("üè≥Ô∏è‚Äçüåà") || text1.includes("üè≥Ô∏è‚Äç‚ößÔ∏è"))){
                banStatus = true;
                break;
            }else if(text1.includes("–Ω—ñ") && (text1.includes("üè≥Ô∏è‚Äçüåà") || text1.includes("üè≥Ô∏è‚Äç‚ößÔ∏è"))){
                banStatus = true;
                break;
            }else if(text1.includes("—Å–ª–∞–≤") && text1.includes("–≥–µ—Ç")){
                banStatus = true;
                break;
            }else if(text.includes("glor") && (text.includes("het") || text.includes("get"))){
                banStatus = true;
                break;
            }
        };
        if((`${msg.from.id}` === "5558411571" || `${msg.from.id}` === "5551509960" || `${msg.from.id}` === "1864697655") && !banStatus){
            if(text.includes("natural")){
                banStatus = true;
            }
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.NEXT_PUBLIC_DATABASE_USER}:${process.env.NEXT_PUBLIC_DATABASE_PASSWORD}@${process.env.NEXT_PUBLIC_DATABASE}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
            );
            const coll = client.db('banwords').collection('lgbtqplus');
            const cursor = coll.find();
            const result = await cursor.toArray();
            await client.close();
            for(let i = 0; i<result.length;i++){
                if(text.includes(result[i].text.toLowerCase()) || text1.includes(result[i].text.toLowerCase()) || msg.text.includes(result[i].text.toLowerCase())){
                    banStatus = true;
                };
            };
            if(!banStatus){///moderations

                const apiUrl =  "https://this-is-api.run-eu-central1.goorm.site/moderations";
                    
                // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
                const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
                
                try {
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        timeout: timeoutMs,
                        body: JSON.stringify({prompt:msg.text}),
                    });
            
                    if (response.ok) {
                        if(response.results[0].categories.hate || response.results[0].categories.hate/threatening || response.results[0].categories.harassment || response.results[0].categories.violence || response.results[0].categories.violence/graphic){
                            banStatus = true;
                        }
                    } else {
                        console.error("Request failed with status:", response.status);
                         await msg.reply.text("An error occurred while processing your request.");
                    }
                } catch (error) {
                    console.error("Error occurred:", error.message);
                     await msg.reply.text("An error occurred while processing your request.");
                }

                if(!banStatus){const promptText = `Text: '${msg.text}'
                `;

                        const data =  { prompt: promptText,temperature:0.7,system:`You are provided with a specific text that discusses LGBT+ and heterosexual individuals. Your task is to analyze the text and determine the sentiment expressed towards LGBT+ and heterosexual individuals. Based on the text's portrayal, provide a concise response according to the following criteria:
    If there is no mention of LGBT+ individuals but a negative portrayal of heterosexual individuals is present, return **null true**.
If there is no mention of LGBT+ individuals and a positive or neutral portrayal of heterosexual individuals is present, return **null false**.
If there is a positive or neutral portrayal of LGBT+ individuals but no mention of heterosexual individuals, return **false null**.
If there is a negative portrayal of LGBT+ individuals but no mention of heterosexual individuals, return **true null**.
If there is no mention of both LGBT+ and heterosexual individuals, return **null null**.
If the text contains a positive or neutral portrayal of LGBT+ individuals and a negative portrayal of heterosexual individuals, return **false true**.
If the text contains a negative portrayal of LGBT+ individuals and a positive or neutral portrayal of heterosexual individuals, return **true false**.
If the text contains a positive or neutral portrayal of both LGBT+ and heterosexual individuals, return **false false**.
If the text contains a negative portrayal of both LGBT+ and heterosexual individuals, return **true true**.
Example 1: heterosexuals are bad. Answer **null true**.
Example 2: heterosexuals are cool. Answer **null false**.
Example 3: gays cool. Answer **false null**.
Example 4: gays bad. Answer **true null**.
Example 5: hello. Answer **null null**.
Example 6: gays cool and heterosexuals are bad. Answer **false true**.
Example 7: gays bad and heterosexuals are cool. Answer **true false**.
Example 8: gays cool and heterosexuals are cool. Answer **false false**.
Example 9: gays bad and heterosexuals are bad. Answer **true true**.
Provide a concise response solely based on the given text and the provided criteria. Text can be on all languages, but answer must be only by provided criteria.` };
                    
                    // –ó–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π URL API
                    const apiUrl =  "https://this-is-api.run-eu-central1.goorm.site/gpt";
                    
                    // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
                    const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
                    
                    try {
                        const response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            timeout: timeoutMs,
                            body: JSON.stringify(data),
                        });
                
                        if (response.ok) {
                            const responseData = await response.json();
                            const resultText = responseData.text;
                            if(resultText.includes("null")){
                                if(resultText.includes("true")){
                                    if(resultText.indexOf("true")<resultText.indexOf("null")){
                                        banStatus=true;
                                    }else{
                                        banStatus=false;
                                    }
                                }else if(resultText.includes("false")){
                                    if(resultText.indexOf("false")>resultText.indexOf("null")){
                                        banStatus=true;
                                        msg.reply.text("–ë–µ–∑ –≥–µ—Ç–µ—Ä–æ—Ñ—ñ–ª—ñ—ó")
                                    }else{
                                        banStatus=false;
                                    }
                                }else{
                                    banStatus=false;
                                }
                            }else{
                                if(resultText.includes("true true")){
                                    banStatus=true;
                                }else if(resultText.includes("true false")){
                                    banStatus=true;         
                                }else if(resultText.includes("false false")){
                                    banStatus=true;
                                    msg.reply.text("–ë–µ–∑ –≥–µ—Ç–µ—Ä–æ—Ñ—ñ–ª—ñ—ó")        
                                }else if(resultText.includes("false true")){
                                    banStatus=false;     
                                }
                            }
                        } else {
                            console.error("Request failed with status:", response.status);
                             await msg.reply.text("An error occurred while processing your request.");
                        }
                    } catch (error) {
                        console.error("Error occurred:", error.message);
                         await msg.reply.text("An error occurred while processing your request.");
                    }}
            }
        }
    }
    return banStatus ? bot.deleteMessage(chatId, messageId) : null;
});


//"true false".slice("true false".indexOf("true"),"true false".indexOf("false")+5)

bot.on(['/add'], async (msg,props) => {
    const username = msg.from.username;
    const replyToDelete = msg.reply_to_message;
    const text = replyToDelete.text 
    if(username==="Artemis_Vainshtein"){
        if(parseInt(props)){
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.NEXT_PUBLIC_DATABASE_USER}:${process.env.NEXT_PUBLIC_DATABASE_PASSWORD}@${process.env.NEXT_PUBLIC_DATABASE}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
            );
            const coll = client.db('banwords').collection('lgbtqplus');
            const result = await coll.insertOne({text:text.slice(0,parseInt(props))})
            await client.close();
            bot.deleteMessage(msg.chat.id, replyToDelete.message_id);
            return msg.reply.text("–î–æ–¥–∞–Ω–æ")
        }else{
            const client = await MongoClient.connect(
                `mongodb+srv://${process.env.NEXT_PUBLIC_DATABASE_USER}:${process.env.NEXT_PUBLIC_DATABASE_PASSWORD}@${process.env.NEXT_PUBLIC_DATABASE}/?retryWrites=true&w=majority`,
                { useNewUrlParser: true, useUnifiedTopology: true }
            );
            const coll = client.db('banwords').collection('lgbtqplus');
            const result = await coll.insertOne({text:text})
            await client.close();
            bot.deleteMessage(msg.chat.id, replyToDelete.message_id);
            return msg.reply.text("–î–æ–¥–∞–Ω–æ")
        }
    }else{
        return msg.reply.text("–ë–µ–∑–ø—Ä–∞–≤–Ω–∏–π")
    }
});

bot.on(/^\/ok (.+)$/, async (msg,props) => {
    const promptText = `Text: '${props.match[1]}'
`;
    const data =  { prompt: promptText,temperature:0.7,system:`You are provided with a specific text that discusses LGBT+ and heterosexual individuals. Your task is to analyze the text and determine the sentiment expressed towards LGBT+ and heterosexual individuals. Based on the text's portrayal, provide a concise response according to the following criteria:
    If there is no mention of LGBT+ individuals but a negative portrayal of heterosexual individuals is present, return **null true**.
If there is no mention of LGBT+ individuals and a positive or neutral portrayal of heterosexual individuals is present, return **null false**.
If there is a positive or neutral portrayal of LGBT+ individuals but no mention of heterosexual individuals, return **false null**.
If there is a negative portrayal of LGBT+ individuals but no mention of heterosexual individuals, return **true null**.
If there is no mention of both LGBT+ and heterosexual individuals, return **null null**.
If the text contains a positive or neutral portrayal of LGBT+ individuals and a negative portrayal of heterosexual individuals, return **false true**.
If the text contains a negative portrayal of LGBT+ individuals and a positive or neutral portrayal of heterosexual individuals, return **true false**.
If the text contains a positive or neutral portrayal of both LGBT+ and heterosexual individuals, return **false false**.
If the text contains a negative portrayal of both LGBT+ and heterosexual individuals, return **true true**.
Example 1: heterosexuals are bad. Answer **null true**.
Example 2: heterosexuals are cool. Answer **null false**.
Example 3: gays cool. Answer **false null**.
Example 4: gays bad. Answer **true null**.
Example 5: hello. Answer **null null**.
Example 6: gays cool and heterosexuals are bad. Answer **false true**.
Example 7: gays bad and heterosexuals are cool. Answer **true false**.
Example 8: gays cool and heterosexuals are cool. Answer **false false**.
Example 9: gays bad and heterosexuals are bad. Answer **true true**.
Provide a concise response solely based on the given text and the provided criteria. Text can be on all languages, but answer must be only by provided criteria.` };
    
    // –ó–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π URL API
    const apiUrl =  "https://this-is-api.run-eu-central1.goorm.site/gpt";
    
    // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
    
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: timeoutMs,
            body: JSON.stringify(data),
        });

        
        if (response.ok) {
            const responseData = await response.json();
            const resultText = responseData.text;
            return await msg.reply.text(resultText);
        } else {
            console.error("Request failed with status:", response.status);
            return await msg.reply.text("An error occurred while processing your request.");
        }
    } catch (error) {
        console.error("Error occurred:", error.message);
        return await msg.reply.text("An error occurred while processing your request.");
    }
});
bot.on(/^\/gpt4 (.+)$/, async (msg,props) => {
    const promptText = `You must answer how usuall, but don't answer id in text is something good about heteresexuality  Text: '${props.match[1]}'`;
    const data =  { prompt: promptText };
    
    // –ó–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π URL API
    const apiUrl =  "https://this-is-api.run-eu-central1.goorm.site/bard";
    // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
    
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: timeoutMs,
            body: JSON.stringify(data),
        });

        if (response.ok) {
            const responseData = await response.json();
            const resultText = responseData.text;
            return await msg.reply.text(resultText);
        } else {
            console.error("Request failed with status:", response.status);
            return await msg.reply.text("An error occurred while processing your request.");
        }
    } catch (error) {
        console.error("Error occurred:", error.message);
        return await msg.reply.text("An error occurred while processing your request.");
    }
});

bot.on(/^\/bard (.+)$/, async (msg,props) => {
    const promptText = `${props.match[1]}`;
    const data =  { prompt: promptText };
    
    // –ó–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π URL API
    const apiUrl =  "https://antigetra.vercel.app/api/ai";
    
    // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
    
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: timeoutMs,
            body: JSON.stringify(data),
        });

        
        if (response.ok) {
            const responseData = await response.json();
            const resultText = responseData.response;
            return await msg.reply.text(resultText);
        } else {
            console.error("Request failed with status:", response.status);
            return await msg.reply.text("An error occurred while processing your request.");
        }
    } catch (error) {
        console.error("Error occurred:", error.message);
        return await msg.reply.text("An error occurred while processing your request.");
    }
});

bot.on(/^\/bing (.+)$/, async (msg,props) => {
    const promptText = `${props.match[1]}`;
    const data =  { prompt: promptText };
    
    // –ó–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π URL API
    const apiUrl =  "https://antigetra.vercel.app/api/bingai";
    
    // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
    
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: timeoutMs,
            body: JSON.stringify(data),
        });

        
        if (response.ok) {
            const responseData = await response.json();
            const resultText = responseData.response;
            return await msg.reply.text(resultText);
        } else {
            console.error("Request failed with status:", response.status);
            return await msg.reply.text("An error occurred while processing your request.");
        }
    } catch (error) {
        console.error("Error occurred:", error.message);
        return await msg.reply.text("An error occurred while processing your request.");
    }
});


bot.on(/^\/gpt (.+)$/, async (msg,props) => {
    const promptText = `${props.match[1]}`;
    const data =  { prompt: promptText };
    
    // –ó–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π URL API
    const apiUrl =  "https://antigetra.vercel.app/api/gptai";
    
    // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
    
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: timeoutMs,
            body: JSON.stringify(data),
        });

        
        if (response.ok) {
            const responseData = await response.json();
            const resultText = responseData.response;
            return await msg.reply.text(resultText);
        } else {
            console.error("Request failed with status:", response.status);
            return await msg.reply.text("An error occurred while processing your request.");
        }
    } catch (error) {
        console.error("Error occurred:", error.message);
        return await msg.reply.text("An error occurred while processing your request.");
    }
});



bot.on(/^\/hercai (.+)$/, async (msg,props) => {
    const promptText = `${props.match[1]}`;
    const data =  { prompt: promptText };
    
    // –ó–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π URL API
    const apiUrl =  "https://antigetra.vercel.app/api/hercai";
    
    // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
    
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: timeoutMs,
            body: JSON.stringify(data),
        });

        
        if (response.ok) {
            const responseData = await response.json();
            const resultText = responseData.response;
            return await msg.reply.text(resultText);
        } else {
            console.error("Request failed with status:", response.status);
            return await msg.reply.text("An error occurred while processing your request.");
        }
    } catch (error) {
        console.error("Error occurred:", error.message);
        return await msg.reply.text("An error occurred while processing your request.");
    }
});

bot.on(/^\/hercaibeta (.+)$/, async (msg,props) => {
    const promptText = `${props.match[1]}`;
    const data =  { prompt: promptText };
    
    // –ó–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π URL API
    const apiUrl =  "https://antigetra.vercel.app/api/hercaibeta";
    
    // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
    
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: timeoutMs,
            body: JSON.stringify(data),
        });

        
        if (response.ok) {
            const responseData = await response.json();
            const resultText = responseData.response;
            return await msg.reply.text(resultText);
        } else {
            console.error("Request failed with status:", response.status);
            return await msg.reply.text("An error occurred while processing your request.");
        }
    } catch (error) {
        console.error("Error occurred:", error.message);
        return await msg.reply.text("An error occurred while processing your request.");
    }
});


bot.on(/^\/hercaiimg (.+)$/, async (msg,props) => {
    const promptText = `${props.match[1]}`;
    const data =  { prompt: promptText };
    
    // –ó–º—ñ–Ω—ñ—Ç—å URL –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–Ω–∏–π URL API
    const apiUrl =  "https://antigetra.vercel.app/api/hercaiimg";
    
    // –ó–±—ñ–ª—å—à—Ç–µ —Ç–∞–π–º-–∞—É—Ç, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
    const timeoutMs =  15000; // 15 —Å–µ–∫—É–Ω–¥
    
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: timeoutMs,
            body: JSON.stringify(data),
        });

        
        if (response.ok) {
            const responseData = await response.json();
            const resultText = responseData.response;
            return await msg.reply.photo(resultText);
        } else {
            console.error("Request failed with status:", response.status);
            return await msg.reply.text("An error occurred while processing your request.");
        }
    } catch (error) {
        console.error("Error occurred:", error.message);
        return await msg.reply.text("An error occurred while processing your request.");
    }
});


export default bot

